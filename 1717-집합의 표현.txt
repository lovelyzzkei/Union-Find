#include<iostream>
using namespace std;

int set[1000010];
int getParent(int parent[], int x);
void unionParent(int parent[], int a, int b);
void findParent(int parent[], int a, int b);

int main() {
	cin.tie(NULL);
	cin.sync_with_stdio(false);
	cout.sync_with_stdio(false);

	int n, m, a, b, mode;
	cin >> n >> m;
	for (int i = 0; i <= n; i++) {
		set[i] = i;
	}
	for (int i = 0; i < m; i++) {
		cin >> mode >> a >> b;
		if (mode == 0) {
			unionParent(set, a, b);
		}
		else if (mode == 1) {
			findParent(set, a, b);
		}
	}
	return 0;
}

int getParent(int parent[], int x) {
	if (parent[x] == x) {
		return x;
	}
	else {
		return parent[x] = getParent(parent, parent[x]);

	}
}

void unionParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	if (a < b) {
		parent[b] = a;
	}
	else {
		parent[a] = b;
	}
}

void findParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	if (a == b) {
		cout << "YES\n";
	}
	else {
		cout << "NO\n";
	}
}