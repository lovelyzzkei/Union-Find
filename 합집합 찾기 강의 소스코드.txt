#include<iostream>
using namespace std;

// 특정한 노드의 부모를 찾는 함수
int getParent(int parent[], int x); 
// 두 부모 노드를 합치는 함수
void unionParent(int parent[], int a, int b);
// 같은 부모를 가지는지 확인하는 함수 == 같은 그래프 상에 존재하는지 확인하는 함수
int findParent(int parent[], int a, int b);

int main() {
	cin.tie(NULL);
	cin.sync_with_stdio(false);
	cout.sync_with_stdio(false);

	int parent[11];
	for (int i = 1; i <= 10; i++) {
		parent[i] = i;
	}
	unionParent(parent, 1, 2);
	unionParent(parent, 2, 3);
	unionParent(parent, 3, 4);
	unionParent(parent, 5, 6);
	unionParent(parent, 6, 7);
	unionParent(parent, 7, 8);

	cout << "1과 5는 연결되어 있나요? " << findParent(parent, 1, 5) << "\n";
	unionParent(parent, 1, 5);
	cout << "1과 5는 연결되어 있나요? " << findParent(parent, 1, 5) << "\n";
	return 0;
}

int getParent(int parent[], int x) {
	// 자기 자신이 부모라면, 즉 그래프의 최상단이라면 자기 자신을 반환. 재귀함수의 종료지점
	if (parent[x] == x) {
		return x;
	}
	// 그렇지 않다면 자기 자신과 연결되어 있는 노드의 부모를 찾기 위해 재귀함수를 사용
	return parent[x] = getParent(parent, parent[x]);
}

void unionParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	// 두 부모 노드의 값중에서 작은 값으로 합침
	if (a < b) {
		parent[b] = a;
	}
	else {
		parent[a] = b;
	}
}

int findParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	// 두 노드의 부모가 같으면 true, 그렇지 않다면 false의 값을 반환
	if (a == b) {
		return 1;
	}
	else {
		return 0;
	}
}